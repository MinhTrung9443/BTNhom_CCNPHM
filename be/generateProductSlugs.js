/**
 * Script Migration: T·∫°o slug cho t·∫•t c·∫£ s·∫£n ph·∫©m ƒë√£ t·ªìn t·∫°i
 * 
 * Ch·∫°y script: node generateProductSlugs.js
 * 
 * Options:
 *   --force: T·∫°o l·∫°i slug cho t·∫•t c·∫£ s·∫£n ph·∫©m (k·ªÉ c·∫£ ƒë√£ c√≥ slug)
 *   --dry-run: Ch·ªâ xem preview, kh√¥ng l∆∞u v√†o database
 * 
 * V√≠ d·ª•:
 *   node generateProductSlugs.js
 *   node generateProductSlugs.js --force
 *   node generateProductSlugs.js --dry-run
 */

import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Product from './src/models/Product.js';

dotenv.config();

// Parse command line arguments
const args = process.argv.slice(2);
const isForceMode = args.includes('--force');
const isDryRun = args.includes('--dry-run');

// H√†m t·∫°o slug t·ª´ t√™n (gi·ªëng trong model)
function generateSlug(name) {
  const vietnameseMap = {
    '√†': 'a', '√°': 'a', '·∫£': 'a', '√£': 'a', '·∫°': 'a',
    'ƒÉ': 'a', '·∫±': 'a', '·∫Ø': 'a', '·∫≥': 'a', '·∫µ': 'a', '·∫∑': 'a',
    '√¢': 'a', '·∫ß': 'a', '·∫•': 'a', '·∫©': 'a', '·∫´': 'a', '·∫≠': 'a',
    '√®': 'e', '√©': 'e', '·∫ª': 'e', '·∫Ω': 'e', '·∫π': 'e',
    '√™': 'e', '·ªÅ': 'e', '·∫ø': 'e', '·ªÉ': 'e', '·ªÖ': 'e', '·ªá': 'e',
    '√¨': 'i', '√≠': 'i', '·ªâ': 'i', 'ƒ©': 'i', '·ªã': 'i',
    '√≤': 'o', '√≥': 'o', '·ªè': 'o', '√µ': 'o', '·ªç': 'o',
    '√¥': 'o', '·ªì': 'o', '·ªë': 'o', '·ªï': 'o', '·ªó': 'o', '·ªô': 'o',
    '∆°': 'o', '·ªù': 'o', '·ªõ': 'o', '·ªü': 'o', '·ª°': 'o', '·ª£': 'o',
    '√π': 'u', '√∫': 'u', '·ªß': 'u', '≈©': 'u', '·ª•': 'u',
    '∆∞': 'u', '·ª´': 'u', '·ª©': 'u', '·ª≠': 'u', '·ªØ': 'u', '·ª±': 'u',
    '·ª≥': 'y', '√Ω': 'y', '·ª∑': 'y', '·ªπ': 'y', '·ªµ': 'y',
    'ƒë': 'd',
    '√Ä': 'A', '√Å': 'A', '·∫¢': 'A', '√É': 'A', '·∫†': 'A',
    'ƒÇ': 'A', '·∫∞': 'A', '·∫Æ': 'A', '·∫≤': 'A', '·∫¥': 'A', '·∫∂': 'A',
    '√Ç': 'A', '·∫¶': 'A', '·∫§': 'A', '·∫®': 'A', '·∫™': 'A', '·∫¨': 'A',
    '√à': 'E', '√â': 'E', '·∫∫': 'E', '·∫º': 'E', '·∫∏': 'E',
    '√ä': 'E', '·ªÄ': 'E', '·∫æ': 'E', '·ªÇ': 'E', '·ªÑ': 'E', '·ªÜ': 'E',
    '√å': 'I', '√ç': 'I', '·ªà': 'I', 'ƒ®': 'I', '·ªä': 'I',
    '√í': 'O', '√ì': 'O', '·ªé': 'O', '√ï': 'O', '·ªå': 'O',
    '√î': 'O', '·ªí': 'O', '·ªê': 'O', '·ªî': 'O', '·ªñ': 'O', '·ªò': 'O',
    '∆†': 'O', '·ªú': 'O', '·ªö': 'O', '·ªû': 'O', '·ª†': 'O', '·ª¢': 'O',
    '√ô': 'U', '√ö': 'U', '·ª¶': 'U', '≈®': 'U', '·ª§': 'U',
    '∆Ø': 'U', '·ª™': 'U', '·ª®': 'U', '·ª¨': 'U', '·ªÆ': 'U', '·ª∞': 'U',
    '·ª≤': 'Y', '√ù': 'Y', '·ª∂': 'Y', '·ª∏': 'Y', '·ª¥': 'Y',
    'ƒê': 'D'
  };

  let slug = name.toLowerCase().trim();
  
  for (const [key, value] of Object.entries(vietnameseMap)) {
    slug = slug.replace(new RegExp(key, 'g'), value.toLowerCase());
  }
  
  slug = slug.replace(/[^a-z0-9]+/g, '-');
  slug = slug.replace(/^-+|-+$/g, '');
  
  return slug;
}

async function generateSlugsForProducts() {
  try {
    // K·∫øt n·ªëi database
    console.log('üîÑ ƒêang k·∫øt n·ªëi MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB\n');

    // In th√¥ng tin mode
    if (isDryRun) {
      console.log('üîç DRY RUN MODE - Kh√¥ng l∆∞u v√†o database\n');
    }
    if (isForceMode) {
      console.log('‚ö†Ô∏è  FORCE MODE - T·∫°o l·∫°i slug cho t·∫•t c·∫£ s·∫£n ph·∫©m\n');
    }

    // L·∫•y s·∫£n ph·∫©m c·∫ßn x·ª≠ l√Ω
    let query;
    if (isForceMode) {
      query = {}; // L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
    } else {
      query = { $or: [{ slug: { $exists: false } }, { slug: null }, { slug: '' }] };
    }

    const products = await Product.find(query).select('_id name slug');
    
    if (products.length === 0) {
      console.log('‚ú® Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o c·∫ßn t·∫°o slug!');
      console.log('üí° S·ª≠ d·ª•ng --force ƒë·ªÉ t·∫°o l·∫°i slug cho t·∫•t c·∫£ s·∫£n ph·∫©m');
      return;
    }

    console.log(`üì¶ T√¨m th·∫•y ${products.length} s·∫£n ph·∫©m c·∫ßn x·ª≠ l√Ω\n`);
    console.log('‚îÅ'.repeat(80));

    let successCount = 0;
    let errorCount = 0;
    let skippedCount = 0;
    const errors = [];

    // X·ª≠ l√Ω t·ª´ng s·∫£n ph·∫©m
    for (let i = 0; i < products.length; i++) {
      const product = products[i];
      const progress = `[${i + 1}/${products.length}]`;
      
      try {
        // Skip n·∫øu ƒë√£ c√≥ slug v√† kh√¥ng ph·∫£i force mode
        if (product.slug && !isForceMode) {
          console.log(`‚è≠Ô∏è  ${progress} Skip: "${product.name}" (ƒë√£ c√≥ slug: ${product.slug})`);
          skippedCount++;
          continue;
        }

        let baseSlug = generateSlug(product.name);
        let slug = baseSlug;
        let counter = 1;

        // Ki·ªÉm tra slug ƒë√£ t·ªìn t·∫°i ch∆∞a
        while (await Product.exists({ slug, _id: { $ne: product._id } })) {
          slug = `${baseSlug}-${counter}`;
          counter++;
        }

        // Hi·ªÉn th·ªã th√¥ng tin
        const oldSlug = product.slug ? ` (c≈©: ${product.slug})` : '';
        console.log(`${isDryRun ? 'üëÅÔ∏è ' : '‚úÖ'} ${progress} "${product.name}"`);
        console.log(`   ‚îî‚îÄ> ${slug}${oldSlug}`);

        // C·∫≠p nh·∫≠t slug n·∫øu kh√¥ng ph·∫£i dry run
        if (!isDryRun) {
          // S·ª≠ d·ª•ng updateOne ƒë·ªÉ bypass validation v√† middleware
          await Product.updateOne(
            { _id: product._id },
            { $set: { slug } }
          );
        }
        
        successCount++;
      } catch (error) {
        console.error(`‚ùå ${progress} L·ªói: "${product.name}"`);
        console.error(`   ‚îî‚îÄ> ${error.message}`);
        errors.push({ name: product.name, error: error.message });
        errorCount++;
      }
    }

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    console.log('\n' + '‚îÅ'.repeat(80));
    console.log('\nüìä === K·∫æT QU·∫¢ ===\n');
    
    if (isDryRun) {
      console.log('üîç Dry Run Mode - Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c l∆∞u');
    }
    
    console.log(`‚úÖ Th√†nh c√¥ng: ${successCount} s·∫£n ph·∫©m`);
    if (skippedCount > 0) {
      console.log(`‚è≠Ô∏è  ƒê√£ b·ªè qua: ${skippedCount} s·∫£n ph·∫©m (ƒë√£ c√≥ slug)`);
    }
    if (errorCount > 0) {
      console.log(`‚ùå L·ªói: ${errorCount} s·∫£n ph·∫©m`);
      console.log('\nüî¥ Chi ti·∫øt l·ªói:');
      errors.forEach((err, idx) => {
        console.log(`   ${idx + 1}. ${err.name}: ${err.error}`);
      });
    }

    console.log(`\nüìà T·ªïng c·ªông: ${products.length} s·∫£n ph·∫©m ƒë∆∞·ª£c x·ª≠ l√Ω`);
    
    if (isDryRun) {
      console.log('\nüí° Ch·∫°y l·∫°i kh√¥ng c√≥ --dry-run ƒë·ªÉ l∆∞u thay ƒë·ªïi');
    } else if (!isForceMode && skippedCount > 0) {
      console.log('\nüí° S·ª≠ d·ª•ng --force ƒë·ªÉ t·∫°o l·∫°i slug cho t·∫•t c·∫£ s·∫£n ph·∫©m');
    }
    
  } catch (error) {
    console.error('\n‚ùå L·ªñI NGHI√äM TR·ªåNG:', error.message);
    console.error(error.stack);
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('\nüëã ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB');
  }
}

// Hi·ªÉn th·ªã banner
console.log('\n' + '='.repeat(80));
console.log('  üè∑Ô∏è  SCRIPT T·∫†O SLUG CHO S·∫¢N PH·∫®M');
console.log('='.repeat(80) + '\n');

// Ch·∫°y script
generateSlugsForProducts();
