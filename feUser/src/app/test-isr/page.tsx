import { Suspense } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Clock, RefreshCw, Zap } from 'lucide-react';

/**
 * ISR Test Page
 * 
 * Trang n√†y d√πng ƒë·ªÉ test ISR thu·∫ßn t√∫y v·ªõi:
 * - Public API (JSONPlaceholder) - kh√¥ng li√™n quan backend
 * - Revalidate m·ªói 10 gi√¢y
 * - Hi·ªÉn th·ªã r√µ r√†ng cache hit/miss
 * 
 * C√ÅCH TEST:
 * 1. npm run build
 * 2. npm start
 * 3. Truy c·∫≠p http://localhost:3000/test-isr
 * 4. Refresh nhi·ªÅu l·∫ßn trong 10s ‚Üí th·∫•y timestamp KH√îNG ƒë·ªïi = cache hit
 * 5. ƒê·ª£i > 10s ‚Üí Refresh ‚Üí timestamp ƒë·ªïi = revalidate
 */

// ‚ö° ISR Config - Cache 10 gi√¢y
export const revalidate = 10;

// Force static generation ƒë·ªÉ Next.js cache ho√†n to√†n
export const dynamic = 'force-static';

interface Post {
  userId: number;
  id: number;
  title: string;
  body: string;
}

function LoadingSkeleton() {
  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="animate-pulse space-y-4">
          <div className="h-32 bg-gray-200 rounded-xl"></div>
          <div className="h-64 bg-gray-200 rounded-xl"></div>
        </div>
      </div>
    </div>
  );
}

export default async function TestISRPage() {
  // Fetch tr·ª±c ti·∫øp trong component
  const startTime = Date.now();
  const fetchTimestamp = new Date().toISOString();
  
  console.log(`üî• [ISR TEST ${fetchTimestamp}] Starting fetch...`);
  
  // Fetch t·ª´ JSONPlaceholder API (public, free API)
  const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=5', {
    next: { revalidate: 10 } // Sync v·ªõi page-level revalidate
  });
  
  const posts: Post[] = await response.json();
  const duration = Date.now() - startTime;
  
  console.log(`‚úÖ [ISR TEST] Completed in ${duration}ms ${duration < 100 ? '‚ö° CACHE HIT' : 'üêå CACHE MISS (fetched from API)'}`);
  
  const fetchedAt = fetchTimestamp;
  const renderedAt = new Date().toISOString();
  
  return (
    <Suspense fallback={<LoadingSkeleton />}>
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-50 py-12">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold text-gray-900 mb-4">
              üß™ ISR Test Page
            </h1>
            <p className="text-lg text-gray-600">
              Ki·ªÉm tra Incremental Static Regeneration c·ªßa Next.js
            </p>
          </div>

          {/* Status Card */}
          <Card className="mb-8 border-2 border-blue-200 shadow-lg">
            <CardHeader className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white">
              <CardTitle className="flex items-center gap-2">
                <Zap className="w-6 h-6" />
                Cache Status
              </CardTitle>
              <CardDescription className="text-blue-100">
                Revalidate: 10 gi√¢y | API: JSONPlaceholder
              </CardDescription>
            </CardHeader>
            <CardContent className="pt-6">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                {/* Fetch Time */}
                <div className="flex flex-col items-center p-4 bg-blue-50 rounded-lg">
                  <Clock className="w-8 h-8 text-blue-600 mb-2" />
                  <div className="text-sm text-gray-600 mb-1">Data Fetched At</div>
                  <div className="font-mono text-xs text-center">
                    {new Date(fetchedAt).toLocaleTimeString('vi-VN')}
                  </div>
                  <div className="text-xs text-gray-400 mt-1">
                    {new Date(fetchedAt).toLocaleDateString('vi-VN')}
                  </div>
                </div>

                {/* Render Time */}
                <div className="flex flex-col items-center p-4 bg-green-50 rounded-lg">
                  <RefreshCw className="w-8 h-8 text-green-600 mb-2" />
                  <div className="text-sm text-gray-600 mb-1">Page Rendered At</div>
                  <div className="font-mono text-xs text-center">
                    {new Date(renderedAt).toLocaleTimeString('vi-VN')}
                  </div>
                  <div className="text-xs text-gray-400 mt-1">
                    {new Date(renderedAt).toLocaleDateString('vi-VN')}
                  </div>
                </div>

                {/* Duration */}
                <div className="flex flex-col items-center p-4 bg-purple-50 rounded-lg">
                  <Zap className="w-8 h-8 text-purple-600 mb-2" />
                  <div className="text-sm text-gray-600 mb-1">Response Time</div>
                  <div className="font-bold text-2xl text-purple-600">
                    {duration}ms
                  </div>
                  <Badge 
                    variant={duration < 100 ? "default" : "secondary"}
                    className={duration < 100 ? "bg-green-500" : "bg-orange-500"}
                  >
                    {duration < 100 ? '‚ö° Cache Hit' : 'üêå Cache Miss'}
                  </Badge>
                </div>
              </div>

              {/* Instructions */}
              <div className="mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                <h3 className="font-semibold text-yellow-900 mb-2">
                  üìñ C√°ch Test ISR:
                </h3>
                <ol className="text-sm text-yellow-800 space-y-1 list-decimal list-inside">
                  <li>
                    <strong>Refresh trang nhi·ªÅu l·∫ßn trong 10 gi√¢y:</strong>
                    <ul className="ml-6 mt-1 space-y-1">
                      <li>‚úÖ &ldquo;Data Fetched At&rdquo; KH√îNG ƒë·ªïi = Cache hit</li>
                      <li>‚úÖ Response time {'<'} 100ms</li>
                      <li>‚úÖ Badge hi·ªÉn th·ªã &ldquo;‚ö° Cache Hit&rdquo;</li>
                    </ul>
                  </li>
                  <li className="mt-2">
                    <strong>ƒê·ª£i h∆°n 10 gi√¢y r·ªìi refresh:</strong>
                    <ul className="ml-6 mt-1 space-y-1">
                      <li>üîÑ &ldquo;Data Fetched At&rdquo; thay ƒë·ªïi = Revalidate</li>
                      <li>üîÑ Response time {'>'} 100ms (l·∫ßn ƒë·∫ßu)</li>
                      <li>üîÑ Badge hi·ªÉn th·ªã &ldquo;üêå Cache Miss&rdquo;</li>
                    </ul>
                  </li>
                  <li className="mt-2">
                    <strong>Ki·ªÉm tra console logs:</strong>
                    <ul className="ml-6 mt-1 space-y-1">
                      <li>‚ö†Ô∏è Trong dev mode: Lu√¥n th·∫•y log (cache t·∫Øt)</li>
                      <li>‚úÖ Trong production: Ch·ªâ th·∫•y log khi cache miss</li>
                    </ul>
                  </li>
                </ol>
              </div>
            </CardContent>
          </Card>

          {/* Data Display */}
          <Card>
            <CardHeader>
              <CardTitle>üìù Sample Data (t·ª´ JSONPlaceholder)</CardTitle>
              <CardDescription>
                5 posts ƒë·∫ßu ti√™n - Data n√†y ƒë∆∞·ª£c cache b·ªüi Next.js ISR
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {posts.map((post) => (
                  <div 
                    key={post.id}
                    className="p-4 border border-gray-200 rounded-lg hover:border-blue-300 transition-colors"
                  >
                    <div className="flex items-start gap-3">
                      <Badge variant="outline" className="mt-1">
                        #{post.id}
                      </Badge>
                      <div className="flex-1">
                        <h3 className="font-semibold text-gray-900 mb-2">
                          {post.title}
                        </h3>
                        <p className="text-sm text-gray-600">
                          {post.body}
                        </p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Footer Info */}
          <div className="mt-8 text-center text-sm text-gray-500">
            <p>
              üí° Tip: M·ªü DevTools ‚Üí Network tab ƒë·ªÉ xem request c√≥ ƒë∆∞·ª£c cache kh√¥ng
            </p>
            <p className="mt-1">
              üîß N·∫øu ƒëang ch·∫°y dev mode, h√£y build production: <code className="bg-gray-200 px-2 py-1 rounded">npm run build && npm start</code>
            </p>
          </div>
        </div>
      </div>
    </Suspense>
  );
}
